@page "/item/createitem"
@attribute [Authorize]
@inject Shared.IAlertService AlertService
@inject Services.IItemService itemService
@inject Services.IUserService userService
@inject NavigationManager navManager
@inject Shared.PageHistoryState PageHistoryState

<h1>Create Item</h1>
<br />
<EditForm Model="@item" OnValidSubmit="@CreateItem">
    <FluentValidator TValidator="ItemValidator" />
    <div class="form-group">
        <label>File Name :</label>
        <div>
            <InputText @bind-Value="@item.Name" class="form-control col-sm-3" />
            <ValidationMessage For="@(() => item.Name)" />
        </div>
    </div>
    <div class="form-group">
        <button disabled="@loading" class="btn btn-primary">
            @if (loading)
            {
                <span class="spinner-border spinner-border-sm mr-1"></span>
            }
            Save File
        </button>
        @if (PageHistoryState.CanGoBack())
        {
            <NavLink href="@PageHistoryState.GetGoBackPage()" class="btn btn-link">Back</NavLink>
        }
        else
        {
            <NavLink href="/item/1" class="btn btn-link">Back</NavLink>
        }
    </div>
</EditForm>
@code {
    bool loading = false;

    Item item = new Item
        {
            Name = "",
            CreateBy="",
        };
    async Task CreateItem(){
        loading = true;
        try
        {
            item.CreateBy = userService.User.Username;
            item.CreateDate = DateTime.Now;
            await itemService.AddItem(item);
            AlertService.Success("Item save successfully", keepAfterRouteChange: true);
            if (PageHistoryState.CanGoBack())
                navManager.NavigateTo(PageHistoryState.GetGoBackPage());
            else
                navManager.NavigateTo("/item/1");
        }
        catch (Exception ex)
        {
            AlertService.Error(ex.Message);
            loading = false;
            StateHasChanged();
        }
    }
  
}
