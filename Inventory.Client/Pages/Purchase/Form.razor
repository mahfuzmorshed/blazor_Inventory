@using System.Globalization
@inject Services.IItemService itemService 
@inject Shared.PageHistoryState PageHistoryState

<EditForm Model="@purchase" OnValidSubmit="@OnValidSubmit">
    <FluentValidator TValidator="PurchaseMasterValidatorViewModel" />
    <div class="form-group">
        <label>Invoice :</label>
        <div>
            <InputText @bind-Value="@purchase.InvoiceNo" class="form-control col-sm-3" />
            <ValidationMessage For="@(() => purchase.InvoiceNo)" />
        </div>
    </div>

    <hr />
    <h3>Purchase</h3>
    <div class="form-row">
        <div class="form-group col-md-3">
            <label>Item</label>
        </div>
        <div class="form-group col-md-3">
            <label>Price</label>
        </div>
        <div class="form-group col-md-3">
            <label>Quantity</label>
        </div>
    </div>
    <ValidationMessage For="@(() => purchase.purchaseDetailsViewModel)" />
    @foreach (var d in purchase.purchaseDetailsViewModel)
    {
        <div class="form-row">
            <div class="form-group col-md-3">
                <InputSelect id="ItemId" class="form-control" @bind-Value="d.ItemId">
                    @foreach (var i in itmLst.Results)
                    {
                        <option value="@i.ItemId">@i.Name</option>
                    }
                </InputSelect>
                <InputText id="ItemId" class="form-control" placeholder="item" @bind-Value="d.ItemId" />
                <ValidationMessage For="@(() => d.ItemId)" />
            </div>
            <div class="form-group col-md-3">
                <InputText id="Price" class="form-control" placeholder="Price" @bind-Value="d.Price" />
                <ValidationMessage For="@(() => d.Price)" />
            </div>
            <div class="form-group col-md-3">
                <InputText id="Quantity" class="form-control" placeholder="Quantity" @bind-Value="d.Quantity" />
                <ValidationMessage For="@(() => d.Quantity)" />
            </div>

            <div class="Form-group">
                <a href="javascript:void(0)" class="btn btn-danger" @onclick="@(()=>OnDetailsDelete(purchase, d))">X</a>
            </div>
        </div>
    }
    <div class="form-group">
        <a href="javascript:void(0)" class="btn btn-success" @onclick="@(()=>OnDetailsAdd(purchase))">Add Address</a>
    </div>
    <hr />
    <div class="form-group">
        <button disabled="@loading" class="btn btn-primary">
            @if (loading)
            {
                <span class="spinner-border spinner-border-sm mr-1"></span>
            }
            @ButtonText
        </button>
        @if (PageHistoryState.CanGoBack())
        {
            <NavLink href="@PageHistoryState.GetGoBackPage()" class="btn btn-link">Cancel</NavLink>
        }
        else
        {
            <NavLink href="/purchase/1" class="btn btn-link">Back</NavLink>
        }
    </div>
</EditForm>

@code {
    [Parameter]
    public PurchaseMasterViewModel purchase { get; set; }
    [Parameter]
    public string ButtonText { get; set; } = "Save";
    [Parameter]
    public bool loading { get; set; } = false;
    [Parameter]
    public EventCallback OnValidSubmit { get; set; }
    
    protected PagedResultT<Item> itmLst;

    protected async override Task OnParametersSetAsync()
    {
        itmLst = await itemService.GetItems(null,"");
    }
    public void OnDetailsDelete(PurchaseMasterViewModel purchase, PurchaseDetailsViewModel details)
    {
        purchase.purchaseDetailsViewModel.Remove(details);
    }

    public void OnDetailsAdd(PurchaseMasterViewModel purchase)
    {
        purchase.purchaseDetailsViewModel.Add(new PurchaseDetailsViewModel { ItemId = "", Price = "", Quantity = "" });
    }
}