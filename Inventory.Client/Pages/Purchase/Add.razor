@page "/purchase/createpurchase"
@attribute [Authorize]
@inject Shared.IAlertService AlertService
@inject Services.IPurchaseService purchaseService
@inject Services.IUserService userService
@inject NavigationManager navManager
@inject Shared.PageHistoryState PageHistoryState

<h1>Create purchase</h1>
<br />

<Form ButtonText="Purchase" purchase="@purchase" loading="@loading"
      OnValidSubmit="@CreatePurchase" />

@code {
    bool loading = false;

    PurchaseMasterViewModel purchase = new PurchaseMasterViewModel
        {
            InvoiceNo = "",
            purchaseDetailsViewModel = new List<PurchaseDetailsViewModel>
        {
            new PurchaseDetailsViewModel {ItemId="", Price="", Quantity=""}
        }
        };
    async Task CreatePurchase()
    {
        loading = true;
        try
        {
            List<PurchaseDetails> pd_lst = new List<PurchaseDetails>();
            foreach (var d in purchase.purchaseDetailsViewModel)
                pd_lst.Add(new PurchaseDetails {ItemId=int.Parse( d.ItemId),Quantity=int.Parse(d.Quantity),Price=decimal.Parse(d.Price) });
            PurchaseMaster pur_obj = new PurchaseMaster
                {
                    InvoiceNo = purchase.InvoiceNo,
                    CreateBy = userService.User.Username,
                    CreateDate = DateTime.Now,
                    purchaseDetails = pd_lst
                };

        await purchaseService.AddPurchaseMaster(pur_obj);
            AlertService.Success("Purchase completed successfully", keepAfterRouteChange: true);
            if (PageHistoryState.CanGoBack())
            {
                navManager.NavigateTo(PageHistoryState.GetGoBackPage());
            }
            else
            {
                navManager.NavigateTo("/purchase/1");
            }
        }
        catch (Exception ex)
        {
            AlertService.Error(ex.Message);
            loading = false;
            StateHasChanged();
        }
    }
}